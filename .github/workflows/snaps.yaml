name: 'Snapcraft CI'

# NOTE: temp disabled since the snap packages aren't currently used due to changes in the local setup/environment

on:
  # run on pushes to main
  push:
    branches:
      - main
      - gh-readonly-queue/main/**
  # run on pull requests that target the main branch
  pull_request:
    branches:
      - main
  # run weekly on Monday at 12:00
  schedule:
    - cron: '0 12 * * 1'
  # trigger releases manually
  workflow_dispatch:
    inputs:
      publish_release:
        description: 'Publish release to the Snapcraft store'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'

concurrency:
  # on main, we want all builds to complete even if commits/merging happens faster to make it easier to discover at which point
  # something broke; else, we cancel "old" builds and run/(re)start the build with the latest changes
  group: ${{ github.ref == 'refs/heads/main' && format('ci-main-{0}-{1}', github.workflow, github.sha) || format('ci-{0}-{1}', github.workflow, github.ref) }}

jobs:
  matrix_setup:
    name: 'Setup Build Matrix'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: './snaps/'

    permissions:
      contents: read

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Build Matrix - Setup
        id: set_matrix
        run: |
          {
            echo "matrix=$(python3 -c 'import os, json; print(json.dumps(os.listdir(".")))')"
            echo "snap_working_dir=./snaps"
            echo "snap_dir=/tmp"
            echo "snap_artifact_name=tmp_snaps_{0}"
          } >> "$GITHUB_OUTPUT"

    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
      snap_working_dir: ${{ steps.set_matrix.outputs.snap_working_dir }}
      snap_dir: ${{ steps.set_matrix.outputs.snap_dir }}
      snap_artifact_name: ${{ steps.set_matrix.outputs.snap_artifact_name }}

  matrix_arch_setup:
    name: 'Setup Arch Matrix'
    needs: [matrix_setup]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash
        working-directory: './snaps/'

    permissions:
      contents: read

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Build Matrix - Setup
        id: set_matrix
        run: |
          ARCH_LIST=$(yq eval --no-colors --exit-status --output-format=json --indent=0 '.architectures.0.build-on' snapcraft.yaml)

          {
            echo "arch_list=${ARCH_LIST}"
          } >> "$GITHUB_OUTPUT"
        working-directory: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}

    outputs:
      arch_list: ${{ steps.set_matrix.outputs.arch_list }}

  snapcraft_build:
    name: 'Build'
    needs: [matrix_setup, matrix_arch_setup]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}
        arch: ${{ fromJson(needs.matrix_arch_setup.outputs.arch_list) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Snapcraft - Set up Build Environment
        id: snapcraft_setup
        # prefix all env variables with "CI_ENV_" to ensure these do not clash with env variables within the snapcraft build environment
        # https://gist.github.com/mihow/9c7f559807069a03e302605691f85572
        run: |
          printenv | sed -e '/^#/d;/^\s*$/d' -e "s/'/'\\\''/g" -e "s/=\(.*\)/='\1'/g" | sed -e 's/^/CI_ENV_/' > .ci.env
          echo "CI_ENV_GIT_COMMIT=$(git rev-parse --short HEAD)" >> .ci.env
        working-directory: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}

      - name: Snapcraft - Build Artifact
        id: snapcraft_build
        uses: snapcore/action-build@3bdaa03e1ba6bf59a65f84a751d943d549a54e79 # v1.3.0
        with:
          path: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}
          snapcraft-args: --build-for=${{ matrix.arch }}

      - name: GitHub - Upload Snap Artifact
        id: github_upload_snap
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: ${{ format(needs.matrix_setup.outputs.snap_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}/*.snap
          retention-days: 1

  snapcraft_test:
    name: 'Install and Test'
    needs: [matrix_setup, snapcraft_build]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    env:
      # renovate: datasource=github-releases depName=goss-org/goss
      GOSS_VERSION: v0.4.8

    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: GitHub - Download Snap Artifact
        id: github_download
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ format(needs.matrix_setup.outputs.snap_artifact_name, matrix.package) }}

      - name: yq - Setup
        id: yq_setup
        uses: mikefarah/yq@8bf425b4d1344db7cd469a8d10a390876e0c77fd # v4.45.1

      - name: Snapcraft - Get Snap Build Information
        id: snapcraft_build_information
        run: |
          NAME=$(yq eval --no-colors --exit-status '.name' snapcraft.yaml)
          VERSION=$(yq eval --no-colors --exit-status '.version' snapcraft.yaml)
          ARCH=$(arch)

          if [ "${ARCH}" = "x86_64" ]
          then
            ARCH="amd64"
          fi

          {
            echo "version=${VERSION}"
            echo "arch=${ARCH}"
            echo "snap_file=${{ steps.github_download.outputs.download-path }}/${NAME}_${VERSION}_${ARCH}.snap"
          } >> "$GITHUB_OUTPUT"
        working-directory: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}

      - name: GitHub - Get Test Parameter
        id: test_parameter
        run: |
          TEST_WORKING_DIR=${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}/tests
          {
            echo "test_working_dir=${TEST_WORKING_DIR}"
            echo "test_result_file=goss_test_results.xml"
            echo "snap_logs_name=snap_logs_{0}.log"
          } >> "$GITHUB_OUTPUT"
          mkdir -p ${TEST_WORKING_DIR}

      - name: Snapcraft - Pre Test Setup
        id: snapcraft_setup
        run: |
          echo "Install snap package:"
          sudo snap install --color=never --dangerous ${{ steps.snapcraft_build_information.outputs.snap_file }}
          SETUP_FILE=./setup.sh
          if test -f "$SETUP_FILE"; then
            echo "$SETUP_FILE exists. Going to run setup:"
            bash ./$SETUP_FILE
          else
            echo "$SETUP_FILE does not exist. Skip setup."
          fi
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}
        env:
          SERVICE_NAME: ${{ matrix.package }}

      - name: Goss - Setup
        uses: e1himself/goss-installation-action@fbb6fb55d3e59c96045b2500eeb8ce0995d99ac1 # v1.2.1
        with:
          version: ${{ env.GOSS_VERSION }}

      - name: GitHub - Check for Test File Existence
        id: check_test_file
        uses: andstor/file-existence-action@076e0072799f4942c8bc574a82233e1e4d13e9d6 # v3.0.0
        with:
          files: ${{ steps.test_parameter.outputs.test_working_dir }}/goss.yaml

      - name: Goss - Test Artifact
        id: goss_test
        if: steps.check_test_file.outputs.files_exists == 'true'
        run: goss validate --format junit --max-concurrent 1 | tee ${{ steps.test_parameter.outputs.test_result_file }}
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}
        env:
          SERVICE_NAME: ${{ matrix.package }}

      - name: Snapcraft - Post Test Teardown
        id: snapcraft_teardown
        if: always()
        run: |
          TEARDOWN_FILE=./teardown.sh
          if test -f "$TEARDOWN_FILE"; then
            echo "$TEARDOWN_FILE exists. Going to run service-specific teardown:"
            bash ./$TEARDOWN_FILE
          else
            echo "$TEARDOWN_FILE does not exist. Skip service-specific teardown."
          fi

          echo "Running general teardown..."
          SNAP_LOGS_FILE="snap_${SERVICE_NAME}.log"
          # according to the shellcheck docs, the check should be disabled in this scenario (see last bullet point):
          # https://github.com/koalaman/shellcheck/wiki/SC2024#rationale
          # shellcheck disable=SC2024
          sudo snap logs "${SERVICE_NAME}" > "$SNAP_LOGS_FILE"
          echo "snap_logs=$(pwd)/${SNAP_LOGS_FILE}" >> "$GITHUB_OUTPUT"
          echo "Snap logs found at \"$SNAP_LOGS_FILE\":"
          cat "$SNAP_LOGS_FILE"
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}
        env:
          SERVICE_NAME: ${{ matrix.package }}

      - name: GitHub - Upload Snap Logs
        id: github_upload_logs
        if: always()
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: ${{ format(steps.test_parameter.outputs.snap_logs_name, matrix.package) }}
          path: ${{ steps.snapcraft_teardown.outputs.snap_logs }}
          retention-days: 7

      - name: GitHub - Generate App Token
        id: github_generate_app_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        if: always() && steps.check_test_file.outputs.files_exists == 'true'
        with:
          # https://github.com/EnricoMi/publish-unit-test-result-action/issues/161
          app_id: ${{ secrets.UNIT_TEST_RESULTS_REPORTER_APP_ID }}
          private_key: ${{ secrets.UNIT_TEST_RESULTS_REPORTER_PRIVATE_KEY }}

      - name: GitHub - Publish Unit Test Results
        id: github_publish_results
        uses: EnricoMi/publish-unit-test-result-action@567cc7f8dcea3eba5da355f6ebc95663310d8a07 # v2.17.0
        if: always() && steps.check_test_file.outputs.files_exists == 'true'
        with:
          github_token: ${{ steps.github_generate_app_token.outputs.token }}
          check_name: Test Results (Snap - ${{ matrix.package }})
          junit_files: ${{ steps.test_parameter.outputs.test_working_dir }}/${{ steps.test_parameter.outputs.test_result_file }}
          # we only add github checks to the PR/commit, but don't create PR comments; reason is that comments will not
          # be replaced but always newly added due to (it looks for "github-actions" user instead of the github app user):
          # https://github.com/EnricoMi/publish-unit-test-result-action/blob/ae7c14a87cf1a1200805b487debc65963bdb3f2d/python/publish/publisher.py#L493
          comment_mode: off

  snapcraft_publish:
    name: 'Publish'
    needs: [matrix_setup, matrix_arch_setup, snapcraft_test, snapcraft_build]
    runs-on: ubuntu-latest

    if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish_release == 'true' && !github.event.act

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}
        arch: ${{ fromJson(needs.matrix_arch_setup.outputs.arch_list) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: GitHub - Download Snap Artifact
        id: github_download
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ format(needs.matrix_setup.outputs.snap_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.snap_dir }}

      - name: Snapcraft - Get Snap Build Information
        id: snapcraft_build_information
        run: |
          NAME=$(yq eval --no-colors --exit-status '.name' snapcraft.yaml)
          VERSION=$(yq eval --no-colors --exit-status '.version' snapcraft.yaml)

          {
            echo "version=${VERSION}"
            echo "snap_file=${{ steps.github_download.outputs.download-path }}/${NAME}_${VERSION}_${{ matrix.arch }}.snap"
          } >> "$GITHUB_OUTPUT"
        working-directory: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}

      - name: Snapcraft - Publish Artifact
        id: snapcraft_publish
        uses: snapcore/action-publish@214b86e5ca036ead1668c79afb81e550e6c54d40 # v1.2.0
        with:
          # Generate via snapcraft (available on ubuntu or via 'brew' on macOS):
          # snapcraft export-login --snaps="nomad-homelab,consul-homelab" --acls="package_access,package_push,package_update,package_release" exported.txt
          store_login: ${{ secrets.SNAPCRAFT_STORE_LOGIN }}
          snap: ${{ steps.snapcraft_build_information.outputs.snap_file }}
          # https://github.community/t/do-expressions-support-ternary-operators-to-change-their-returned-value/18114/3
          # The condition evaluates to a boolean, which is implicitly cast to a number and used as array index, where false = 0 and true = 1.
          release: ${{ fromJSON('["edge", "stable"]')[github.ref == format('refs/heads/{0}', github.event.repository.default_branch)] }}
