name: 'Snapcraft Update CI'

# NOTE: temp disabled since the snap packages aren't currently used due to changes in the local setup/environment

on:
  # run daily on midnight
  schedule:
    - cron: '0 0 * * *'
  # run on pushes to main if snapcraft.yaml files changed
  push:
    branches:
      - main
    paths:
      - snaps/**/snapcraft.yaml
  # trigger manually if needed
  workflow_dispatch:

concurrency:
  # on main, we want all builds to complete even if commits/merging happens faster to make it easier to discover at which point
  # something broke; else, we cancel "old" builds and run/(re)start the build with the latest changes
  group: ${{ github.ref == 'refs/heads/main' && format('ci-main-{0}-{1}', github.workflow, github.sha) || format('ci-{0}-{1}', github.workflow, github.ref) }}

jobs:
  matrix_setup:
    name: 'Setup Build Matrix'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: './snaps/'

    permissions:
      contents: read

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Build Matrix - Setup
        id: set_matrix
        run: |
          {
            echo "matrix=$(python3 -c 'import os, json; print(json.dumps(os.listdir(".")))')"
            echo "snap_working_dir=./snaps"
          } >> "$GITHUB_OUTPUT"

    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
      snap_working_dir: ${{ steps.set_matrix.outputs.snap_working_dir }}

  snapcraft_update:
    name: 'Update Check'
    needs: [matrix_setup]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: yq - Setup
        id: yq_setup
        uses: mikefarah/yq@8bf425b4d1344db7cd469a8d10a390876e0c77fd # v4.45.1

#      - name: Python - Get pip Cache Dir
#        id: python_pip_cache_dir
#        run: |
#          echo "dir=$(pip cache dir)" >> "$GITHUB_OUTPUT"

      - name: Python - Setup pip Dependencies Cache
        id: python_pip_cache_setup
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
#          path: ${{ steps.python_pip_cache_dir.outputs.dir }}
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*.pip') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Python - Install Dependencies
        id: python_pip_install
        run: |
          python3 -m pip install -r .github/workflows/snaps_update.pip

      - name: GitHub - Retrieve Repository Source and Current Version
        id: github_retrieve_data
        run: |
          GIT_REPO_URL="$(yq eval --no-colors --exit-status '.website' snapcraft.yaml)"
          export GIT_REPO_URL
          GIT_ORG="$(python3 -c 'import os; from giturlparse import parse; print(parse(os.getenv("GIT_REPO_URL")).owner)')"
          GIT_REPO="$(python3 -c 'import os; from giturlparse import parse; print(parse(os.getenv("GIT_REPO_URL")).repo)')"

          {
            echo "used_version=$(yq eval --no-colors --exit-status '.version' snapcraft.yaml)"
            echo "source_git_url=${GIT_REPO_URL}"
            echo "source_git_org=${GIT_ORG}"
            echo "source_git_repo=${GIT_REPO}"
          } >> "$GITHUB_OUTPUT"
        working-directory: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}

      - name: GitHub - Get Latest Release Version
        id: github_latest_version
        uses: pozetroninc/github-action-get-latest-release@2a61c339ea7ef0a336d1daa35ef0cb1418e7676c # v0.8.0
        with:
          owner: ${{ steps.github_retrieve_data.outputs.source_git_org }}
          repo: ${{ steps.github_retrieve_data.outputs.source_git_repo }}
          excludes: prerelease, draft

      - name: GitHub - Compare and Process Versions
        id: github_evaluate_data
        run: |
          USED_VERSION="${{ steps.github_retrieve_data.outputs.used_version }}"
          LATEST_VERSION="$(python3 -c 'print("${{ steps.github_latest_version.outputs.release }}".lstrip("v"))')"
          echo "Used Version: $USED_VERSION"
          echo "Latest Version: $LATEST_VERSION"

          export USED_VERSION
          export LATEST_VERSION
          SEMVER_COMPARE="$(python3 -c 'import os; import semver; print(semver.compare(os.getenv("USED_VERSION"),os.getenv("LATEST_VERSION")))')"

          # a value of minus one means the first version (parameter) [used version] is lower second version (parameter) [current version] according to semver
          if [[ "$SEMVER_COMPARE" == "-1" ]]; then
            echo "Newer version available, going to update the snapcraft.yaml file to version $LATEST_VERSION and create/update the PR."
            yq eval --no-colors --exit-status --inplace '.version = strenv(LATEST_VERSION)' snapcraft.yaml
            echo "version_updated=true" >> "$GITHUB_OUTPUT"
          else
            echo "No newer version available. Will do nothing and stay on version $USED_VERSION"
            echo "version_updated=false" >> "$GITHUB_OUTPUT"
          fi
        working-directory: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}

      - name: GitHub - Generate App Token
        id: github_generate_app_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        if: steps.github_evaluate_data.outputs.version_updated == 'true'
        with:
          app_id: ${{ secrets.SNAP_PACKAGE_UPDATER_APP_ID }}
          private_key: ${{ secrets.SNAP_PACKAGE_UPDATER_APP_PRIVATE_KEY }}

      - name: GitHub - Setup GPG Keys
        id: github_setup_gpg
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6.1.0
        if: steps.github_evaluate_data.outputs.version_updated == 'true'
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: GitHub - Create Pull Request
        id: github_create_pr
        uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c # v6.1.0
        if: steps.github_evaluate_data.outputs.version_updated == 'true'
        with:
          token: ${{ steps.github_generate_app_token.outputs.token }}
          add-paths: ${{ needs.matrix_setup.outputs.snap_working_dir }}/${{ matrix.package }}/snapcraft.yaml
          commit-message: "fix(deps): update ${{ matrix.package }} to ${{ steps.github_latest_version.outputs.release }}"
          committer: ${{ steps.github_setup_gpg.outputs.name }} <${{ steps.github_setup_gpg.outputs.email }}>
          author: ${{ steps.github_setup_gpg.outputs.name }} <${{ steps.github_setup_gpg.outputs.email }}>
          branch: snap-update/${{ matrix.package }}
          delete-branch: true
          title: "fix(deps): update ${{ matrix.package }} to ${{ steps.github_latest_version.outputs.release }}"
          body: |
            This Pull Request updates [${{ matrix.package }}](${{ steps.github_retrieve_data.outputs.source_git_url }}) from _v${{ steps.github_retrieve_data.outputs.used_version }}_ to _${{ steps.github_latest_version.outputs.release }}_.
          labels: dependencies
          assignees: busybeaver
          reviewers: busybeaver
