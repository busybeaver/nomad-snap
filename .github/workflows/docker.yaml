name: 'Docker CI'

on:
  # run on pushes to main
  push:
    branches:
      - main
      - gh-readonly-queue/main/**
  # run on pull requests that target the main branch
  pull_request:
    branches:
      - main
  # run weekly on Monday at 12:00
  schedule:
    - cron: '0 12 * * 1'

concurrency:
  # on main, we want all builds to complete even if commits/merging happens faster to make it easier to discover at which point
  # something broke; else, we cancel "old" builds and run/(re)start the build with the latest changes
  group: ${{ github.ref == 'refs/heads/main' && format('ci-main-{0}-{1}', github.workflow, github.sha) || format('ci-{0}-{1}', github.workflow, github.ref) }}

jobs:
  matrix_setup:
    name: 'Setup Build Matrix'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: './docker/'

    permissions:
      contents: read

    env:
      REGISTRY: ghcr.io # GitHub Registry

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Build Matrix - Setup
        id: set_matrix
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository }}/{0}"
          {
            echo "matrix=$(python3 -c 'import os, json; print(json.dumps(os.listdir(".")))')"
            echo "image_name_latest=${IMAGE_NAME}:latest"
            echo "image_name_git_tag=${IMAGE_NAME}:$(git rev-parse --short HEAD)"
            echo "image_name_date=${IMAGE_NAME}:$(date +%F | sed 's/-/\./g')"
            echo "docker_registry=${{ env.REGISTRY }}"
            echo "docker_working_dir=./docker"
            echo "docker_image_dir=/tmp"
            echo "docker_image_file=/tmp/image.tar"
            echo "docker_artifact_name=tmp_docker_image_{0}"
          } >> "$GITHUB_OUTPUT"

    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
      image_name_latest: ${{ steps.set_matrix.outputs.image_name_latest }}
      image_name_git_tag: ${{ steps.set_matrix.outputs.image_name_git_tag }}
      image_name_date: ${{ steps.set_matrix.outputs.image_name_date }}
      docker_registry: ${{ steps.set_matrix.outputs.docker_registry }}
      docker_working_dir: ${{ steps.set_matrix.outputs.docker_working_dir }}
      docker_image_dir: ${{ steps.set_matrix.outputs.docker_image_dir }}
      docker_image_file: ${{ steps.set_matrix.outputs.docker_image_file }}
      docker_artifact_name: ${{ steps.set_matrix.outputs.docker_artifact_name }}

  code_quality:
    name: 'Code Quality Checks'
    needs: [matrix_setup]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      statuses: write

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: SuperLinter - Lint Dockerfile
        id: superlinter_scan
        uses: github/super-linter/slim@45fc0d88288beee4701c62761281edfee85655d7 # v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          FILTER_REGEX_INCLUDE: .*${{ needs.matrix_setup.outputs.docker_working_dir }}/${{ matrix.package }}/.*
          VALIDATE_ALL_CODEBASE: ${{ github.event_name != 'pull_request' }}
          VALIDATE_DOCKERFILE: true # dockerfilelint
          VALIDATE_DOCKERFILE_HADOLINT: true # hadolint

  docker_build:
    name: 'Build'
    needs: [matrix_setup]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Docker - Set-Up Environment
        id: docker_setup
        uses: docker/setup-buildx-action@aa33708b10e362ff993539393ff100fa93ed6a27 # v3.5.0

      - name: Docker - Build Artifact # but don't publish yet
        id: docker_build
        uses: docker/build-push-action@5176d81f87c23d6fc96624dfdbcd9f3830bbe445 # v6.5.0
        with:
          context: ${{ needs.matrix_setup.outputs.docker_working_dir }}/${{ matrix.package }}
          push: false
          tags: ${{ format(needs.matrix_setup.outputs.image_name_latest, matrix.package) }},${{ format(needs.matrix_setup.outputs.image_name_git_tag, matrix.package) }},${{ format(needs.matrix_setup.outputs.image_name_date, matrix.package) }}
          # platforms: ${{ steps.docker_setup.outputs.platforms }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # https://github.com/docker/build-push-action/issues/225#issuecomment-727639184
          # https://github.com/docker/buildx/blob/bcfd4348290ecb67122a882e0ef42aa537a51ae6/docs/reference/buildx_build.md#output
          outputs: type=docker,dest=${{ needs.matrix_setup.outputs.docker_image_file }}

      - name: GitHub - Upload Image Artifact
        id: github_upload_image
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: ${{ format(needs.matrix_setup.outputs.docker_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.docker_image_file }}
          retention-days: 1

  docker_test:
    name: 'Test'
    needs: [matrix_setup, docker_build]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read

    env:
      # renovate: datasource=github-releases depName=goss-org/goss
      GOSS_VERSION: v0.4.8

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: GitHub - Download Image Artifact
        id: github_download_image
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ format(needs.matrix_setup.outputs.docker_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.docker_image_dir }}

      - name: GitHub - Get Test Parameter
        id: test_parameter
        run: |
          TEST_WORKING_DIR="${{ needs.matrix_setup.outputs.docker_working_dir }}/${{ matrix.package }}/tests"
          {
            echo "test_working_dir=${TEST_WORKING_DIR}"
            echo "test_result_file=goss_test_results.xml"
            echo "container_logs_name=container_logs_{0}.log"
          } >> "$GITHUB_OUTPUT"
          mkdir -p ${TEST_WORKING_DIR}

      - name: Docker - Load Image
        id: docker_load
        run: docker image load --input ${{ needs.matrix_setup.outputs.docker_image_file }} && docker images

      - name: Docker - Pre Test Setup
        id: docker_setup
        run: |
          SETUP_FILE=./setup.sh
          if test -f "$SETUP_FILE"; then
            echo "$SETUP_FILE exists. Going to run setup:"
            sh ./$SETUP_FILE
          else
            echo "$SETUP_FILE does not exist. Skip setup."
          fi
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}
        env:
          IMAGE_NAME: ${{ format(needs.matrix_setup.outputs.image_name_latest, matrix.package) }}

      - name: Goss - Setup
        id: goss_setup
        uses: e1himself/goss-installation-action@fbb6fb55d3e59c96045b2500eeb8ce0995d99ac1 # v1.2.1
        with:
          version: ${{ env.GOSS_VERSION }}

      - name: GitHub - Check for Test File Existence
        id: check_test_file
        uses: andstor/file-existence-action@076e0072799f4942c8bc574a82233e1e4d13e9d6 # v3.0.0
        with:
          files: ${{ steps.test_parameter.outputs.test_working_dir }}/goss.yaml

      - name: Goss - Test Docker Image
        id: goss_test
        if: steps.check_test_file.outputs.files_exists == 'true'
        # the service/container to test needs to be called "container_under_test" in the docker-compose.yaml file;
        # it's important to set DEBUG=true, else will the docker container logs be deleted after running the tests;
        # we use "sed '1d'" to remove the first line of the output. it contains the name of the container but we only need the XML based JUnit results
        run: DEBUG=true dcgoss run container_under_test | sed '1d' | tee ${{ steps.test_parameter.outputs.test_result_file }}
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}
        env:
          IMAGE_NAME: ${{ format(needs.matrix_setup.outputs.image_name_latest, matrix.package) }}
          GOSS_OPTS: --format junit --max-concurrent 1
          GOSS_SLEEP: 30s

      - name: Docker - Post Test Teardown
        id: docker_teardown
        if: always()
        run: |
          TEARDOWN_FILE=./teardown.sh
          if test -f "$TEARDOWN_FILE"; then
            echo "$TEARDOWN_FILE exists. Going to run service-specific teardown:"
            sh ./$TEARDOWN_FILE
          else
            echo "$TEARDOWN_FILE does not exist. Skip service-specific teardown."
          fi

          echo "Running general teardown..."
          # sudo is required, otherwise "find" runs in permission errors
          # CONTAINER_LOGS_FILE=$(sudo find /tmp/ -name "docker_output.log" || "")
          CONTAINER_LOGS_FILE="not_existent.log"
          if test -f "$CONTAINER_LOGS_FILE"; then
            echo "container_logs=${CONTAINER_LOGS_FILE}" >> "$GITHUB_OUTPUT"
            echo "Container logs found at \"$CONTAINER_LOGS_FILE\":"
            cat "$CONTAINER_LOGS_FILE"
          else
            echo "No container logs found at \"$CONTAINER_LOGS_FILE\""

            FALLBACK_LOGS_FILE="container_fallback.log"
            echo "no container logs available" > "$FALLBACK_LOGS_FILE"
            echo "container_logs=$(pwd)/${FALLBACK_LOGS_FILE}" >> "$GITHUB_OUTPUT"
          fi
        working-directory: ${{ steps.test_parameter.outputs.test_working_dir }}

      - name: GitHub - Upload Container Logs
        id: github_upload_logs
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: always()
        with:
          name: ${{ format(steps.test_parameter.outputs.container_logs_name, matrix.package) }}
          path: ${{ steps.docker_teardown.outputs.container_logs }}
          retention-days: 7

      - name: GitHub - Generate App Token
        id: github_generate_app_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        if: always() && steps.check_test_file.outputs.files_exists == 'true'
        with:
          # https://github.com/EnricoMi/publish-unit-test-result-action/issues/161
          app_id: ${{ secrets.UNIT_TEST_RESULTS_REPORTER_APP_ID }}
          private_key: ${{ secrets.UNIT_TEST_RESULTS_REPORTER_PRIVATE_KEY }}

      - name: GitHub - Publish Unit Test Results
        id: github_publish_results
        uses: EnricoMi/publish-unit-test-result-action@567cc7f8dcea3eba5da355f6ebc95663310d8a07 # v2.17.0
        if: always() && steps.check_test_file.outputs.files_exists == 'true'
        with:
          github_token: ${{ steps.github_generate_app_token.outputs.token }}
          check_name: Test Results (Docker - ${{ matrix.package }})
          junit_files: ${{ steps.test_parameter.outputs.test_working_dir }}/${{ steps.test_parameter.outputs.test_result_file }}
          # we only add github checks to the PR/commit, but don't create PR comments; reason is that comments will not
          # be replaced but always newly added due to (it looks for "github-actions" user instead of the github app user):
          # https://github.com/EnricoMi/publish-unit-test-result-action/blob/ae7c14a87cf1a1200805b487debc65963bdb3f2d/python/publish/publisher.py#L493
          comment_mode: off

  container_security:
    name: 'Container Security Checks'
    needs: [matrix_setup, docker_build]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      security-events: write

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: GitHub - Download Image Artifact
        id: github_download_image
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ format(needs.matrix_setup.outputs.docker_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.docker_image_dir }}

      - name: Docker - Load Image
        id: docker_load
        run: docker image load --input ${{ needs.matrix_setup.outputs.docker_image_file }} && docker images

      - name: Snyk - Check for Docker Image Vulnerabilities
        id: snyk_scan
        uses: snyk/actions/docker@b98d498629f1c368650224d6d212bf7dfa89e4bf # 0.4.0
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ format(needs.matrix_setup.outputs.image_name_latest, matrix.package) }}
          # only report issues medium or higher (aka no low risk issues)
          args: --file=${{ needs.matrix_setup.outputs.docker_working_dir }}/${{ matrix.package }}/Dockerfile --severity-threshold=medium
          sarif: true

      # Replace any "null" and "undefined" security severity values with 0. The null/undefined value is
      # used in the case of license-related findings, which do not do not indicate a security vulnerability.
      # See: https://github.com/github/codeql-action/issues/2187#issuecomment-2043220400
      - name: GitHub- Replace Security-Severity undefined and null for License-Related Findings
        # always run, even if the previous step failed due to found vulnerabilities (so it vulnerabilities get reported)
        # only run if the sarif file exists
        if: hashFiles('snyk.sarif') != ''
        run: |
          sed -i 's/"security-severity": "undefined"/"security-severity": "0"/g' snyk.sarif
          sed -i 's/"security-severity": "null"/"security-severity": "0"/g' snyk.sarif

      - name: GitHub - Upload result to Code Scanning
        id: github_upload_sarif
        uses: github/codeql-action/upload-sarif@afb54ba388a7dca6ecae48f608c4ff05ff4cc77a # v3.25.15
        # always run, even if the previous step failed due to found vulnerabilities (so it vulnerabilities get reported)
        # only run if the sarif file exists
        # only run on pushes on the default branch
        if: hashFiles('snyk.sarif') != '' && github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          sarif_file: snyk.sarif

  docker_publish:
    name: 'Publish'
    needs: [matrix_setup, code_quality, docker_build, docker_test, container_security]
    runs-on: ubuntu-latest

    if: github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && !github.event.act

    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix_setup.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      packages: write

    env:
      # renovate: datasource=github-releases depName=sigstore/cosign
      COSIGN_VERSION: v2.3.0

    steps:
      - name: StepSecurity - Harden Github-hosted Runners
        uses: step-security/harden-runner@0d381219ddf674d61a7572ddd19d7941e271515c # v2.9.0
        with:
          egress-policy: audit
          disable-telemetry: true
          disable-sudo: true

      - name: Git - Checkout
        id: git_checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          # required by tj-actions/changed-files
          fetch-depth: 2

      - name: Git - Get Changed Files
        id: git_changed_files
        uses: tj-actions/changed-files@6b2903bdce6310cfbddd87c418f253cf29b2dec9 # v44.5.6
        with:
          files: |
            ${{ needs.matrix_setup.outputs.docker_working_dir }}/${{ matrix.package }}/Dockerfile

      - name: GitHub - Download Image Artifact
        id: github_download_image
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        if: steps.git_changed_files.outputs.any_changed == 'true'
        with:
          name: ${{ format(needs.matrix_setup.outputs.docker_artifact_name, matrix.package) }}
          path: ${{ needs.matrix_setup.outputs.docker_image_dir }}

      - name: Docker - Load Image
        id: docker_load
        if: steps.git_changed_files.outputs.any_changed == 'true'
        run: docker image load --input ${{ needs.matrix_setup.outputs.docker_image_file }}

      - name: Docker - Log into Registry ${{ needs.matrix_setup.outputs.docker_registry }}
        id: docker_login
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        if: steps.git_changed_files.outputs.any_changed == 'true'
        with:
          registry: ${{ needs.matrix_setup.outputs.docker_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker - Publish Artifact
        id: docker_publish
        if: steps.git_changed_files.outputs.any_changed == 'true'
        run: |
          docker image push ${{ format(needs.matrix_setup.outputs.image_name_git_tag, matrix.package) }}
          docker image push ${{ format(needs.matrix_setup.outputs.image_name_date, matrix.package) }}
          docker image push ${{ format(needs.matrix_setup.outputs.image_name_latest, matrix.package) }}

      - name: Cosign - Setup
        id: cosign_setup
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0
        if: steps.git_changed_files.outputs.any_changed == 'true'
        with:
          cosign-release: ${{ env.COSIGN_VERSION }}

      - name: Cosign - Sign Docker Artifact
        id: cosign_sign
        if: steps.git_changed_files.outputs.any_changed == 'true'
        run: |
          GIT_TAG_IMAGE="$(docker inspect --format='{{index .RepoDigests 0}}' ${{ format(needs.matrix_setup.outputs.image_name_git_tag, matrix.package) }})"
          cosign sign \
            --key env://COSIGN_PRIVATE_KEY \
            --yes \
            --annotations "repo=${{ github.repository }}" \
            --annotations "workflow=${{ github.workflow }}" \
            --annotations "ref=${{ github.sha }}" \
            "${GIT_TAG_IMAGE}"

          DATE_IMAGE="$(docker inspect --format='{{index .RepoDigests 0}}' ${{ format(needs.matrix_setup.outputs.image_name_date, matrix.package) }})"
          cosign sign \
            --key env://COSIGN_PRIVATE_KEY \
            --yes \
            --annotations "repo=${{ github.repository }}" \
            --annotations "workflow=${{ github.workflow }}" \
            --annotations "ref=${{ github.sha }}" \
            "${DATE_IMAGE}"
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
